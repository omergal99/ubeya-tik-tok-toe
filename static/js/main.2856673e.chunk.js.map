{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","dimenstions","setDimenstions","users","setUsers","isEditMode","setIsEditMode","Math","round","random","currUser","setCurrUser","Array","map","arrayGame","setArrayGame","isGameEnd","setIsGameEnd","checkRow","idxRow","idxCol","arrayToCheck","every","item","checkColumn","arrRow","checkDiagonals","mainDiagonal","idx","secondDiagonal","list","dice","className","key","style","backgroundColor","cursor","onClick","copy","row","cell","chooseBox","gridGameStyle","height","width","gridTemplateColumns","gridTemplateRows","type","value","onChange","target","Number","ev","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2856673e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nfunction App() {\n\n  const [dimenstions, setDimenstions] = React.useState(5);\n\n  const [users, setUsers] = React.useState(['Omer', 'Rotem', 'No Winner']);\n  const [isEditMode, setIsEditMode] = React.useState(false);\n\n  const [currUser, setCurrUser] = React.useState(Math.round(Math.random()));\n  const [arrayGame, setArrayGame] = React.useState([...Array(dimenstions)].map(() => [...Array(dimenstions)]));\n  const [isGameEnd, setIsGameEnd] = React.useState(false);\n\n  const chooseBox = (idxRow, idxCol) => {\n    const diceIsNotEmpty = arrayGame[idxRow][idxCol];\n    if (diceIsNotEmpty || isEditMode || isGameEnd) return;\n    const copy = arrayGame;\n    copy[idxRow][idxCol] = currUser ? 'X' : 'O';\n    setArrayGame(copy);\n    const isWinner = checkRow(idxRow, idxCol, copy)\n      || checkColumn(idxRow, idxCol, copy)\n      || checkDiagonals(idxRow, idxCol, copy);\n    if (isWinner) {\n      setIsGameEnd(true);\n    } else {\n      const isGameEnd = arrayGame.every(row => row.every(cell => cell));\n      if (isGameEnd) {\n        setCurrUser(2);\n        setIsGameEnd(true);\n      } else {\n        setCurrUser(currUser ? 0 : 1);\n      }\n    }\n  }\n\n  const checkRow = (idxRow, idxCol, arrayToCheck) => {\n    return arrayToCheck[idxRow].every(item => item === arrayToCheck[idxRow][idxCol]);\n  }\n\n  const checkColumn = (idxRow, idxCol, arrayToCheck) => {\n    return arrayToCheck.every(arrRow => arrRow[idxCol] === arrayToCheck[idxRow][idxCol]);\n  }\n\n  const checkDiagonals = (idxRow, idxCol, arrayToCheck) => {\n    if (idxRow + idxCol !== dimenstions - 1 && idxRow !== idxCol) return false;\n    const mainDiagonal = arrayToCheck.every((item, idx) => {\n      return arrayToCheck[idx][idx] === arrayToCheck[idxRow][idxCol]\n    });\n    const secondDiagonal = arrayToCheck.every((item, idx) => {\n      return arrayToCheck[idx][dimenstions - 1 - idx] === arrayToCheck[idxRow][idxCol]\n    });\n    if (mainDiagonal || secondDiagonal) return true;\n    else return false;\n  }\n\n  const restartGame = () => {\n    setCurrUser(currUser ? 0 : 1);\n    setIsGameEnd(false);\n    setArrayGame([...Array(dimenstions)].map(() => [...Array(dimenstions)]));\n  }\n\n  const changeDimenstions = ({ target }) => {\n    if (target.value <= 2 || target.value > 10) return;\n    const value = Math.round(Number(target.value));\n    setDimenstions(value);\n    setArrayGame([...Array(value)].map(() => [...Array(value)]));\n  }\n\n  const list = arrayGame.map((item, idxRow) => {\n    return arrayGame[idxRow].map((item, idxCol) => {\n      const dice = arrayGame[idxRow][idxCol];\n      return <li className={`grid-item ${!dice ? 'color' + currUser : ''}`} key={`${idxRow}-${idxCol}`}\n        style={{\n          backgroundColor: dice === 'X' ? '#b4b4f3' : dice === 'O' ? '#b7ef9e' : '',\n          cursor: !dice ? 'pointer' : 'context-menu'\n        }}\n        onClick={() => chooseBox(idxRow, idxCol)}>\n        <div>{dice}</div>\n      </li>\n    })\n  })\n\n  const gridGameStyle = {\n    height: `${dimenstions * 110}px`, width: `${dimenstions * 110}px`,\n    gridTemplateColumns: `repeat(${dimenstions}, 1fr)`, gridTemplateRows: `repeat(${dimenstions}, 1fr)`\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Welcome to X&O Game!</h1>\n\n      <span>Change Dimenstions </span>\n      <input className=\"dimenstions-input\" type=\"number\" value={dimenstions} onChange={changeDimenstions} />\n      <button onClick={restartGame}>Play again!</button>\n\n      <div className=\"users\">\n        <div className=\"user-name\">\n          User1:&nbsp;\n          {isEditMode\n            ? <input type=\"text\" value={users[0]} onChange={ev => setUsers([ev.target.value, users[1], 'No Winner'])} />\n            : <span>{users[0]}<strong> - O</strong></span>\n          }\n        </div>\n        <div className=\"user-name\">\n          User2:&nbsp;\n          {isEditMode\n            ? <input type=\"text\" value={users[1]} onChange={ev => setUsers([users[0], ev.target.value, 'No Winner'])} />\n            : <span>{users[1]}<strong> - X</strong></span>\n          }\n        </div>\n        <button onClick={() => setIsEditMode(!isEditMode)}>{isEditMode ? 'Save' : 'Edit Names'}</button>\n      </div>\n\n      <div>\n        {isGameEnd\n          ? <h3>Game End! Winner: {users[currUser]}</h3>\n          : <h3>Now playing:&nbsp;\n            <span style={{ backgroundColor: currUser ? '#b4b4f3' : '#b7ef9e' }}>\n              {users[currUser]}\n            </span>\n            <strong> - {currUser ? 'X' : 'O'}</strong>\n          </h3>\n        }\n      </div>\n\n      <ul className=\"grid-game\" style={gridGameStyle}>\n        {list}\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}